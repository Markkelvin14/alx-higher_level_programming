# 4-print_square.txt

This module prints a square with the character # ``print_square(size)``.

Squares are printed using the ``#`` character. The parameter ``size``
represents the height and width of the square.

::

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(1)
    #

::

    >>> print_square(4)
    ####
    ####
    ####
    ####

::

    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

If ``size`` is 0, the function prints nothing.

::

    >>> print_square(0)

test for Invalid Sizes
=====================

The parameter ``size`` must be an integer otherwise a TypeError is raised.

::

    >>> print_square("try an int")
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(1.67)
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(None)
    Traceback (most recent call last):
    TypeError: size must be an integer

If the ``size`` is less than zero, a ValueError is raised.

::

    >>> print_square(-3)
    Traceback (most recent call last):
    ValueError: size must be >= 0

type-checking occurs before value-checking.

::

    >>> print_square(-2.5)
    Traceback (most recent call last):
    TypeError: size must be an integer

one argument must be provided.

::

    >>> print_square()
    Traceback (most recent call last):
    TypeError: print_square() missing 1 required positional argument: 'size'

